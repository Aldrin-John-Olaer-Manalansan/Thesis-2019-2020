#include <SPI.h>
#include <RF24.h>
#include "C:\Users\acer\Desktop\Thesis\Project\Source_Codes\transceiver_library.cpp"

#define NRF_PIN_CE 25
#define NRF_PIN_CSN 26
//

RF24 radio(NRF_PIN_CE, NRF_PIN_CSN); // CE, CSN
const byte __public_channel__[5] = {102, 32, 92, 192, 97};
byte __private_channel__[5] = {0b01001100, 0b11100000, 0b00010111, 0b01101100, 0b10101100}; // 76,224,23,108,172
byte __target_devicetype__;

unsigned long __timesaver__ = millis();
byte __packet__[32] = {0};
String __Router_SSID__ = "Manalansan";
String __Router_Password__ = "Manalansan@123!";

void setup() {
  Serial.begin(115200);
  if (radio.begin()) // buhayin na yung module, magkainin na ng current yung nrf
    Serial.println("Radio was Successful");
  else
    Serial.println("Radio failed to begin");

  radio.setChannel(HOMEPACKAGE_TRANSCEIVER_PHYSICALCHANNEL);
  radio.setPALevel(RF24_PA_MAX); // 0-3 , 0=lowest , 3=max
  radio.setDataRate(RF24_250KBPS); // slowest data rate for improved range of transmission and more low power consumption
  radio.setRetries(7, 15); // 2000us delay each failure, 15 retries(max already)

  // set the 1st pipe(0) sa private channel
  radio.stopListening();
  if (radio.getDataRate() == RF24_250KBPS)
    radio.flush_tx();
  radio.openReadingPipe(0, __public_channel__);
  radio.openReadingPipe(1, __private_channel__);
  radio.startListening();

  /* while (true) // only use this for channel callibration, else comment this whole while loop
    {
    for (__loopindex__=0;__loopindex__<=125;__loopindex__++)
    {
        radio.setChannel(__loopindex__);
        Serial.println(String("Channel ")+String(__loopindex__)
                      +String(": TestCarrier=")+String(radio.testCarrier())
                      +String("  TestRPD=")+String(radio.testRPD()));
    }
    delay(10000); // after 10 sec, retest channels
    } */
}

void transmitpacket(byte* packet, bool longtimeout = false)
{
  radio.stopListening();
  if (radio.getDataRate() == RF24_250KBPS)
    radio.flush_tx();
  constructtrashbin(packet);
  radio.openWritingPipe(__private_channel__);
  __timesaver__ = millis();
  while (!radio.write(packet, 32) && millis() - __timesaver__ <= 1000 * (longtimeout == true ? 10 : 1))
    // broadcast yung message
  {
    //digitalWrite(TRANSCEIVER_PIN_SIGNALINDICATOR, LOW);
    datatypewritebits(packet + TRANSCEIVER_BYTELOC_NRFTM, TRANSCEIVER_DEVICETYPE_REPEATER, TRANSCEIVER_NRFTM_BITCOUNT_TDT, TRANSCEIVER_NRFTM_BITLOC_TDT);
    radio.openWritingPipe(__public_channel__); // eto yung target public channel( hallway ng llyce ) na papasukan ng mensahe(message)
    if (radio.write(packet, 32)) // broadcast yung message
      break;
    else
    {
      constructtrashbin(packet);
      radio.setDataRate(radio.getDataRate() == RF24_250KBPS ? RF24_1MBPS : RF24_250KBPS);
      radio.openWritingPipe(__private_channel__); // eto yung target public channel( hallway ng llyce ) na papasukan ng mensahe(message)
      datatypewritebits(packet + TRANSCEIVER_BYTELOC_NRFTM, TRANSCEIVER_DEVICETYPE_HUB, TRANSCEIVER_NRFTM_BITCOUNT_TDT, TRANSCEIVER_NRFTM_BITLOC_TDT);
      Serial.println("Failed to Send the Data");
    }
  }
  radio.setDataRate(RF24_250KBPS);
  radio.openReadingPipe(0, __public_channel__);
  radio.startListening();
}

void loop()
{
  if (Serial.available() > 0)
    /*
       commands:

       UNIVERSAL:
         pingpong
         thatdevicerestart

       SMART SOCKET:
         getpower
         getrelay
         onrelay
         offrelay

       IP Camera:
         getip
         setupwifi

       Known commands:
       get power consumption of the device - byte[0]=128 - byte[14]=2
       get relay state of the device - byte[0]=128 - byte[14]=3
       get ip address of the device - byte[0]=144 - byte[14]=5
       ping-pong communication - byte[0]=128 - byte[14]=64
       SET relay state of the device - byte[0]=131 - byte[14]=(0 or 1)
       byte communication - byte[0]=142
    */
  {
    String serialstr = Serial.readString();
    if (serialstr.indexOf("getpower") >= 0)
    {
      Serial.println("Fetching Energy Consumption on that Device...");
      memset(__packet__, 0, 32);
      __packet__[TRANSCEIVER_BYTELOC_NRFTM] = 128;
      __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = TRANSCEIVER_REQUEST_GETPOWERCONSUMPTION;
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("getrelay") >= 0)
    {
      Serial.println("Getting that Device's Relay State...");
      memset(__packet__, 0, 32);
      __packet__[TRANSCEIVER_BYTELOC_NRFTM] = 128;
      __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = TRANSCEIVER_REQUEST_GETRELAYSTATE;
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("getip") >= 0)
    {
      Serial.println("Getting that Device's IP Address...");
      memset(__packet__, 0, 32);
      __packet__[TRANSCEIVER_BYTELOC_NRFTM] = 144;
      __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = TRANSCEIVER_REQUEST_GETIPADDRESS;
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("pingpong") >= 0)
    {
      Serial.println("Initiating Ping-Pong Communication...");
      memset(__packet__, 0, 32);
      __packet__[TRANSCEIVER_BYTELOC_NRFTM] = 128 + __target_devicetype__;
      __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = TRANSCEIVER_REQUEST_PINGPONG;
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("offrelay") >= 0)
    {
      Serial.println("Turning OFF that Device's Relay...");
      memset(__packet__, 0, 32);
      __packet__[TRANSCEIVER_BYTELOC_NRFTM] = 131;
      __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = 0;
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("onrelay") >= 0)
    {
      Serial.println("Turning ON that Device's Relay...");
      memset(__packet__, 0, 32);
      __packet__[TRANSCEIVER_BYTELOC_NRFTM] = 131;
      __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = 1;
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("thatdevicerestart") >= 0)
    {
      Serial.println("Commanding that Device to Restart...");
      memset(__packet__, 0, 32);
      __packet__[TRANSCEIVER_BYTELOC_NRFTM] = 128 + __target_devicetype__;
      __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = TRANSCEIVER_REQUEST_RESTART;
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
      memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("setupwifi") >= 0)
    {
      Serial.print(String("Set SSID: "));
      while (Serial.available() <= 0) { }
      __Router_SSID__ = Serial.readString();
      if (__Router_SSID__.endsWith("\r\n"))
        __Router_SSID__.remove(__Router_SSID__.length() - 2, 2);
      else if (__Router_SSID__.endsWith("\r") || __Router_SSID__.endsWith("\n"))
        __Router_SSID__.remove(__Router_SSID__.length() - 1, 1);
      Serial.println(__Router_SSID__);

      Serial.print(String("Set Password: "));
      while (Serial.available() <= 0) { }
      __Router_Password__ = Serial.readString();
      if (__Router_Password__.endsWith("\r\n"))
        __Router_Password__.remove(__Router_Password__.length() - 2, 2);
      else if (__Router_Password__.endsWith("\r") || __Router_Password__.endsWith("\n"))
        __Router_Password__.remove(__Router_Password__.length() - 1, 1);
      Serial.println(__Router_Password__);
      Serial.println("WiFi Credentials was changed successfully");
    }
    else if (serialstr.indexOf("byte") >= 0)
    {
      memset(__packet__, 0, 32);
      for (__loopindex__ = 0; __loopindex__ < 32; __loopindex__++)
      {
        if (__loopindex__ > 0 && __loopindex__ < 14)
          continue;
        Serial.print(String("Set Byte ") + String(__loopindex__) + String(": "));
        while (Serial.available() <= 0) { }
        serialstr = Serial.readString();
        if (serialstr.endsWith("\r\n"))
          serialstr.remove(serialstr.length() - 2, 2);
        else if (serialstr.endsWith("\r") || serialstr.endsWith("\n"))
          serialstr.remove(serialstr.length() - 1, 1);
        if (serialstr == "stop")
          break;
        __packet__[__loopindex__] = serialstr.toInt();
        Serial.println(__packet__[__loopindex__]);
      }
      memcpy(__packet__ + 1, __private_channel__, 5);
      memcpy(__packet__ + 6, __public_channel__, 5);
      Serial.println("Reciting Message");
      for (__loopindex__ = 0; __loopindex__ < 32; __loopindex__++)
      {
        Serial.print(String("Byte ") + String(__loopindex__) + String(':'));
        Serial.println(__packet__[__loopindex__]);
      }

      transmitpacket(__packet__);
    }
    else if (serialstr.indexOf("string") >= 0)
    {
      Serial.println(String("Set String Message: "));
      memset(__packet__, 0, 32);
      while (Serial.available() <= 0) { }
      serialstr = Serial.readString();
      if (serialstr.endsWith("\r\n"))
        serialstr.remove(serialstr.length() - 2, 2);
      else if (serialstr.endsWith("\r") || serialstr.endsWith("\n"))
        serialstr.remove(serialstr.length() - 1, 1);

      Serial.println(serialstr);
      byte length = serialstr.length() < 18 ? serialstr.length() : 18;
      for (__loopindex__ = 0; __loopindex__ < length; __loopindex__++)
      {
        __packet__[14 + __loopindex__] = serialstr[__loopindex__];
        Serial.print((char)__packet__[14 + __loopindex__]);
      }
      Serial.println("");

      __packet__[0] = 0b10001111;
      memcpy(__packet__ + 1, __private_channel__, 5);
      memcpy(__packet__ + 6, __public_channel__, 5);
      Serial.println("Reciting Message");
      for (__loopindex__ = 0; __loopindex__ < 32; __loopindex__++)
      {
        Serial.print(String("Byte ") + String(__loopindex__) + String(':'));
        Serial.println(__packet__[__loopindex__]);
      }

      transmitpacket(__packet__);
    }
  }
  else if (radio.available())
  {
    radio.read(&__packet__, 32);
    byte publictrashbin[TRANSCEIVER_BYTECOUNT_TRASHBIN];
    memcpy(publictrashbin, __packet__ + TRANSCEIVER_BYTELOC_TRASHBIN, TRANSCEIVER_BYTECOUNT_TRASHBIN);
    if (wasintrashbin(publictrashbin))
    {
      Serial.println(String("Message Denied because of Trashbin Value: ")
                     + String(__packet__[TRANSCEIVER_BYTELOC_TRASHBIN]) + String("  ")
                     + String(__packet__[TRANSCEIVER_BYTELOC_TRASHBIN + 1]));
      return;
    }
    printpacketdetails(__packet__);

    switch (datatypereadbits(__packet__[TRANSCEIVER_BYTELOC_NRFTM], TRANSCEIVER_NRFTM_BITLOC_COMMAND, TRANSCEIVER_NRFTM_BITCOUNT_COMMAND))
    {
      case TRANSCEIVER_COMMAND_UNIVERSAL_REQUEST:
        {
          if (__packet__[TRANSCEIVER_BYTELOC_INFORMATION] != 0)
          {
            datatypewritebits(&__packet__[TRANSCEIVER_BYTELOC_NRFTM], datatypereadbits(__packet__[TRANSCEIVER_BYTELOC_NRFTM], TRANSCEIVER_NRFTM_BITLOC_TDT, TRANSCEIVER_NRFTM_BITCOUNT_TDT), TRANSCEIVER_NRFTM_BITCOUNT_RDT, TRANSCEIVER_NRFTM_BITLOC_RDT); // become the receiver device type on our transmission
            datatypewritebits(&__packet__[TRANSCEIVER_BYTELOC_NRFTM], TRANSCEIVER_DEVICETYPE_HUB, TRANSCEIVER_NRFTM_BITCOUNT_TDT, TRANSCEIVER_NRFTM_BITLOC_TDT);
            memcpy(__private_channel__, __packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK); // renew global variable
            __target_devicetype__ = datatypereadbits(__packet__[TRANSCEIVER_BYTELOC_NRFTM], TRANSCEIVER_NRFTM_BITLOC_TDT, TRANSCEIVER_NRFTM_BITCOUNT_TDT); // renew global variable
            memcpy(__packet__ + TRANSCEIVER_BYTELOC_RECEIVERSK, __private_channel__, TRANSCEIVER_BYTECOUNT_RECEIVERSK);
            memcpy(__packet__ + TRANSCEIVER_BYTELOC_TRANSMITTERSK, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
            memset(__packet__ + TRANSCEIVER_BYTELOC_TRASHBIN, 0, TRANSCEIVER_BYTECOUNT_TRASHBIN);
            if (__packet__[TRANSCEIVER_BYTELOC_INFORMATION] == TRANSCEIVER_REQUEST_GETPUBLICCHANNEL)
            {
              datatypewritebits(&__packet__[TRANSCEIVER_BYTELOC_NRFTM], TRANSCEIVER_COMMAND_UNIVERSAL_PUBLICCHANNELINFO, TRANSCEIVER_NRFTM_BITCOUNT_COMMAND, TRANSCEIVER_NRFTM_BITLOC_COMMAND);
              memset(__packet__ + TRANSCEIVER_BYTELOC_PACKETINFO, 0, TRANSCEIVER_BYTECOUNT_PACKETINFO);
              memcpy(__packet__ + TRANSCEIVER_BYTELOC_INFORMATION, __public_channel__, TRANSCEIVER_BYTECOUNT_TRANSMITTERSK);
              transmitpacket(__packet__);
            }
            else if (__packet__[TRANSCEIVER_BYTELOC_INFORMATION] == TRANSCEIVER_REQUEST_GETWIFICREDENTIALS || __packet__[TRANSCEIVER_BYTELOC_INFORMATION] == TRANSCEIVER_REQUEST_GETWIFILOSTPACKET)
            {
              datatypewritebits(&__packet__[TRANSCEIVER_BYTELOC_NRFTM], TRANSCEIVER_COMMAND_IPCAMERA_WIFICREDENTIALS, TRANSCEIVER_NRFTM_BITCOUNT_COMMAND, TRANSCEIVER_NRFTM_BITLOC_COMMAND);

              unsigned long packetwassent[2] = {0};
              word strinfolength[2];
              byte packet_count[2];

              if (__packet__[TRANSCEIVER_BYTELOC_INFORMATION] == TRANSCEIVER_REQUEST_GETWIFILOSTPACKET)
              {
                for (__loopindex__ = 1; __loopindex__ <= 4; __loopindex__++)
                {
                  packetwassent[0] += (__packet__[TRANSCEIVER_BYTELOC_INFORMATION + __loopindex__]) << (8 * (__loopindex__ - 1));
                  packetwassent[1] += (__packet__[TRANSCEIVER_BYTELOC_INFORMATION + __loopindex__ + 4]) << (8 * (__loopindex__ - 1));
                }
              }
              Serial.println(packetwassent[0]);
              Serial.println(packetwassent[1]);

              strinfolength[0] = __Router_SSID__.length();
              if (strinfolength[0] > TRANSCEIVER_BYTECOUNT_WIFIINFO * TRANSCEIVER_MAXPACKETSCOUNT)
              {
                strinfolength[0] = TRANSCEIVER_BYTECOUNT_WIFIINFO * TRANSCEIVER_MAXPACKETSCOUNT;
                packet_count[0] = TRANSCEIVER_MAXPACKETSCOUNT;
                Serial.println("WARNING!SSID was too tong! the system can only send 31 packets and that is 31*17=527 characters MAX!");
              }
              else
                packet_count[0] = ceil(strinfolength[0] / (float)TRANSCEIVER_BYTECOUNT_WIFIINFO);

              strinfolength[1] = __Router_Password__.length();
              if (strinfolength[1] > TRANSCEIVER_BYTECOUNT_WIFIINFO * TRANSCEIVER_MAXPACKETSCOUNT)
              {
                strinfolength[1] = TRANSCEIVER_BYTECOUNT_WIFIINFO * TRANSCEIVER_MAXPACKETSCOUNT;
                packet_count[1] = TRANSCEIVER_MAXPACKETSCOUNT;
                Serial.println("WARNING!Password was too tong! the system can only send 31 packets and that is 31*17=527 characters MAX!");
              }
              else
                packet_count[1] = ceil(strinfolength[1] / (float)TRANSCEIVER_BYTECOUNT_WIFIINFO);

              __packet__[TRANSCEIVER_BYTELOC_PACKETINFO] = (packet_count[0] >> 2) + (packet_count[1] << 3);
              __packet__[TRANSCEIVER_BYTELOC_INFORMATION] = (packet_count[0] << 6);

              //multi-packet handling system
              for (byte i = 0; i <= 1; i++) // 0=ssid,1=password
              {
                Serial.print(String("\nTransmitting ")+String(i==0?"SSID:":"Password:"));
                bitWrite(__packet__[TRANSCEIVER_BYTELOC_INFORMATION],0,i); // indicates that the info was an ssid(0) or password(1) packet
                byte lengthfinal = strinfolength[i] % TRANSCEIVER_BYTECOUNT_WIFIINFO;
                if (lengthfinal == 0)
                  lengthfinal = TRANSCEIVER_BYTECOUNT_WIFIINFO;
                for (byte index = 0; index < packet_count[i]; index++)
                {
                  if (bitRead(packetwassent[i], index))
                    continue; // do not try to send this data if this packet was already sent
                  datatypewritebits(&__packet__[TRANSCEIVER_BYTELOC_INFORMATION], index, 5, 1); // write the current packet
                  memset(__packet__ + TRANSCEIVER_BYTELOC_INFORMATION + 1, 0, TRANSCEIVER_BYTECOUNT_WIFIINFO);
                  //memset(__packet__ + TRANSCEIVER_BYTELOC_INFORMATION+1,255,TRANSCEIVER_BYTECOUNT_WIFIINFO); // fill the array with HOLES(255), this is an indicator that if this was received at the receiver, the packet was LOST
                  byte packetlength;
                  if (index + 1 < packet_count[i])
                    packetlength = TRANSCEIVER_BYTECOUNT_WIFIINFO;
                  else
                  {
                    packetlength = lengthfinal;
                    //memset(__packet__ + TRANSCEIVER_BYTELOC_INFORMATION+1+lengthfinal,0,TRANSCEIVER_BYTECOUNT_WIFIINFO-lengthfinal); // fill the end of the packet with a TERMINATOR mark(0), this is the indicator that here ends the information
                  }
                  if (i==0)
                    memcpy(__packet__ + TRANSCEIVER_BYTELOC_INFORMATION + 1, __Router_SSID__.c_str() + (TRANSCEIVER_BYTECOUNT_WIFIINFO * index), packetlength);
                  else
                    memcpy(__packet__ + TRANSCEIVER_BYTELOC_INFORMATION + 1, __Router_Password__.c_str() + (TRANSCEIVER_BYTECOUNT_WIFIINFO * index), packetlength);
                  Serial.print((char*)__packet__ + TRANSCEIVER_BYTELOC_INFORMATION + 1);
                  transmitpacket(__packet__, true); // transmit with long autoretry timeout of 10 seconds
                }
              }

              Serial.print("\nTransmission Complete\n");
              //
            }
          }
          break;
        }
      case TRANSCEIVER_COMMAND_SMARTSOCKET_POWERCONSUMPTION:
        Serial.print("Total Wh since last fetch:");

        for (__loopindex__ = 0; __loopindex__ < TRANSCEIVER_BYTECOUNT_INFORMATION; __loopindex__++)
          Serial.print((char)__packet__[TRANSCEIVER_BYTELOC_INFORMATION + __loopindex__]);
        Serial.println("");
        break;
      case TRANSCEIVER_COMMAND_SMARTSOCKET_RELAYSTATE:
        Serial.print("Relay State: ");
        if (__packet__[TRANSCEIVER_BYTELOC_INFORMATION])
          Serial.println("HIGH");
        else
          Serial.println("LOW");
        break;
      case TRANSCEIVER_COMMAND_IPCAMERA_IPADDRESS:
        Serial.println(String("IP Address: ")
                       + String(__packet__[TRANSCEIVER_BYTELOC_INFORMATION])
                       + String('.')
                       + String(__packet__[TRANSCEIVER_BYTELOC_INFORMATION + 1])
                       + String('.')
                       + String(__packet__[TRANSCEIVER_BYTELOC_INFORMATION + 2])
                       + String('.')
                       + String(__packet__[TRANSCEIVER_BYTELOC_INFORMATION + 3]));
        break;
      case TRANSCEIVER_COMMAND_UNIVERSAL_PINGPONG:
        Serial.println("The Device was Reachable!");
        break;
      default:
        break;
    }

  }
}
